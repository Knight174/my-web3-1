import { ethers } from 'ethers';
import { config } from 'dotenv';

config();

// 利用工厂函数部署合约
// const contractFactory = new ethers.ContractFactory(abi, bytecode, signer);
// contractFactory.deploy(args) // args 合约构造函数的参数

// infura API key
const INFURA_ID = process.env.INFURA_ID;

// 连接sepolia主网
const provider = new ethers.JsonRpcProvider(
  `https://sepolia.infura.io/v3/${INFURA_ID}`
);

// 连接钱包
const privateKey = process.env.PRIVATE_KEY;
const wallet = new ethers.Wallet(privateKey, provider);

// ERC20的人类可读abi
const abiERC20 = [
  'constructor(string memory name_, string memory symbol_)',
  'function name() view returns (string)',
  'function symbol() view returns (string)',
  'function totalSupply() view returns (uint256)',
  'function balanceOf(address) view returns (uint)',
  'function transfer(address to, uint256 amount) external returns (bool)',
  'function mint(uint amount) external',
];

// 填入合约字节码，在remix中，你可以在两个地方找到Bytecode
// 1. 编译面板的Bytecode按钮
// 2. 文件面板artifact文件夹下与合约同名的json文件中
// 里面"bytecode"属性下的"object"字段对应的数据就是Bytecode，挺长的，608060起始
// "object": "608060405260646000553480156100...

const bytecode =
  '60806040526005805460ff1916601217905534801561001c575f80fd5b5060405161095e38038061095e83398101604081905261003b916100f8565b600361004783826101db565b50600461005482826101db565b50505061029a565b634e487b7160e01b5f52604160045260245ffd5b5f82601f83011261007f575f80fd5b81516001600160401b03808211156100995761009961005c565b604051601f8301601f19908116603f011681019082821181831017156100c1576100c161005c565b816040528381528660208588010111156100d9575f80fd5b8360208701602083015e5f602085830101528094505050505092915050565b5f8060408385031215610109575f80fd5b82516001600160401b038082111561011f575f80fd5b61012b86838701610070565b93506020850151915080821115610140575f80fd5b5061014d85828601610070565b9150509250929050565b600181811c9082168061016b57607f821691505b60208210810361018957634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156101d657805f5260205f20601f840160051c810160208510156101b45750805b601f840160051c820191505b818110156101d3575f81556001016101c0565b50505b505050565b81516001600160401b038111156101f4576101f461005c565b610208816102028454610157565b8461018f565b602080601f83116001811461023b575f84156102245750858301515b5f19600386901b1c1916600185901b178555610292565b5f85815260208120601f198616915b828110156102695788860151825594840194600190910190840161024a565b508582101561028657878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b6106b7806102a75f395ff3fe608060405234801561000f575f80fd5b50600436106100a6575f3560e01c806370a082311161006e57806370a082311461013657806375247a581461015557806395d89b4114610168578063a0712d6814610170578063a9059cbb14610183578063dd62ed3e14610196575f80fd5b806306fdde03146100aa57806318160ddd146100c857806323b872dd146100df578063313ce5671461010257806342966c6814610121575b5f80fd5b6100b26101c0565b6040516100bf91906104d6565b60405180910390f35b6100d160025481565b6040519081526020016100bf565b6100f26100ed366004610526565b61024c565b60405190151581526020016100bf565b60055461010f9060ff1681565b60405160ff90911681526020016100bf565b61013461012f36600461055f565b610323565b005b6100d1610144366004610576565b5f6020819052908152604090205481565b6100f2610163366004610596565b610386565b6100b26103f2565b61013461017e36600461055f565b6103ff565b6100f2610191366004610596565b61045b565b6100d16101a43660046105be565b600160209081525f928352604080842090915290825290205481565b600380546101cd906105ef565b80601f01602080910402602001604051908101604052809291908181526020018280546101f9906105ef565b80156102445780601f1061021b57610100808354040283529160200191610244565b820191905f5260205f20905b81548152906001019060200180831161022757829003601f168201915b505050505081565b6001600160a01b0383165f90815260016020908152604080832033845290915281208054839190839061028090849061063b565b90915550506001600160a01b0384165f90815260208190526040812080548492906102ac90849061063b565b90915550506001600160a01b0383165f90815260208190526040812080548492906102d890849061064e565b92505081905550826001600160a01b0316846001600160a01b03165f805160206106628339815191528460405161031191815260200190565b60405180910390a35060019392505050565b335f908152602081905260408120805483929061034190849061063b565b925050819055508060025f828254610359919061063b565b90915550506040518181525f9033905f80516020610662833981519152906020015b60405180910390a350565b335f8181526001602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906103e09086815260200190565b60405180910390a35060015b92915050565b600480546101cd906105ef565b335f908152602081905260408120805483929061041d90849061064e565b925050819055508060025f828254610435919061064e565b909155505060405181815233905f905f805160206106628339815191529060200161037b565b335f9081526020819052604081208054839190839061047b90849061063b565b90915550506001600160a01b0383165f90815260208190526040812080548492906104a790849061064e565b90915550506040518281526001600160a01b0384169033905f80516020610662833981519152906020016103e0565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b0381168114610521575f80fd5b919050565b5f805f60608486031215610538575f80fd5b6105418461050b565b925061054f6020850161050b565b9150604084013590509250925092565b5f6020828403121561056f575f80fd5b5035919050565b5f60208284031215610586575f80fd5b61058f8261050b565b9392505050565b5f80604083850312156105a7575f80fd5b6105b08361050b565b946020939093013593505050565b5f80604083850312156105cf575f80fd5b6105d88361050b565b91506105e66020840161050b565b90509250929050565b600181811c9082168061060357607f821691505b60208210810361062157634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52601160045260245ffd5b818103818111156103ec576103ec610627565b808201808211156103ec576103ec61062756feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220b4a37514da71ff9fd8dab3f296d5459b4f7d32c0d699dcd25308db89b5cf388064736f6c63430008190033';

const factoryERC20 = new ethers.ContractFactory(abiERC20, bytecode, wallet);

const main = async () => {
  // ...

  const balance = await provider.getBalance(wallet);

  if (ethers.formatEther(balance) > 0.02) {
    // 1. 使用 contractFactory 部署 ERC20 代币合约
    console.log('\n1. 利用contractFactory部署ERC20代币合约');
    const contract = await factoryERC20.deploy('WTF token', 'WTF');
    console.log('合约地址:', contract.target);
    console.log('部署合约的交易详情');
    console.log(contract.deploymentTransaction());
    console.log('\n等待合约部署上链');
    await contract.waitForDeployment();
    console.log('合约已上链');

    // 2. 打印合约的name()和symbol()，然后调用mint()函数，给自己地址mint 1000 代币
    console.log('\n2. 调用mint()函数，给自己地址mint 1000 代币');
    console.log(`合约名称: ${await contract.name()}`);
    console.log(`合约代号: ${await contract.symbol()}`);
    let tx = await contract.mint('1000');
    console.log('等待交易上链');
    await tx.wait();
    console.log(`mint后地址中代币余额: ${await contract.balanceOf(wallet)}`);
    console.log(`代币总供给: ${await contract.totalSupply()}`);

    // 3. 调用transfer()函数，给Vitalik转账1000代币
    console.log('\n3. 调用transfer()函数，给Vitalik转账100代币');
    tx = await contract.transfer('vitalik.eth', '100');
    console.log('等待交易上链');
    await tx.wait();
    console.log(
      `Vitalik钱包中的代币余额: ${await contract.balanceOf('vitalik.eth')}`
    );
  }
};

main();
